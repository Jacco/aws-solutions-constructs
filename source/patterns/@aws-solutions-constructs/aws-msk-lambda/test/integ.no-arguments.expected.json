{
    "Description": "Integration Test for aws-kinesisstreams-lambda",
    "Resources": {
        "Vpc8378EB38": {
            "Type": "AWS::EC2::VPC",
            "Properties": {
                "CidrBlock": "172.168.0.0/16",
                "EnableDnsHostnames": true,
                "EnableDnsSupport": true,
                "InstanceTenancy": "default",
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "no-arguments/Vpc"
                    }
                ]
            }
        },
        "VpcPublicSubnet1Subnet5C2D37C4": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": {
                    "Ref": "Vpc8378EB38"
                },
                "AvailabilityZone": "test-region-1a",
                "CidrBlock": "172.168.0.0/19",
                "MapPublicIpOnLaunch": true,
                "Tags": [
                    {
                        "Key": "aws-cdk:subnet-name",
                        "Value": "Public"
                    },
                    {
                        "Key": "aws-cdk:subnet-type",
                        "Value": "Public"
                    },
                    {
                        "Key": "Name",
                        "Value": "no-arguments/Vpc/PublicSubnet1"
                    }
                ]
            },
            "Metadata": {
                "cfn_nag": {
                    "rules_to_suppress": [
                        {
                            "id": "W33",
                            "reason": "Allow Public Subnets to have MapPublicIpOnLaunch set to true"
                        }
                    ]
                }
            }
        },
        "VpcPublicSubnet3SubnetBE12F0B6": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": {
                    "Ref": "Vpc8378EB38"
                },
                "AvailabilityZone": "test-region-1c",
                "CidrBlock": "172.168.64.0/19",
                "MapPublicIpOnLaunch": true,
                "Tags": [
                    {
                        "Key": "aws-cdk:subnet-name",
                        "Value": "Public"
                    },
                    {
                        "Key": "aws-cdk:subnet-type",
                        "Value": "Public"
                    },
                    {
                        "Key": "Name",
                        "Value": "no-arguments/Vpc/PublicSubnet3"
                    }
                ]
            },
            "Metadata": {
                "cfn_nag": {
                    "rules_to_suppress": [
                        {
                            "id": "W33",
                            "reason": "Allow Public Subnets to have MapPublicIpOnLaunch set to true"
                        }
                    ]
                }
            }
        },
        "VpcPublicSubnet1RouteTable6C95E38E": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": {
                    "Ref": "Vpc8378EB38"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "no-arguments/Vpc/PublicSubnet1"
                    }
                ]
            }
        },
        "VpcPublicSubnet1RouteTableAssociation97140677": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "RouteTableId": {
                    "Ref": "VpcPublicSubnet1RouteTable6C95E38E"
                },
                "SubnetId": {
                    "Ref": "VpcPublicSubnet1Subnet5C2D37C4"
                }
            }
        },
        "VpcPublicSubnet1DefaultRoute3DA9E72A": {
            "Type": "AWS::EC2::Route",
            "Properties": {
                "RouteTableId": {
                    "Ref": "VpcPublicSubnet1RouteTable6C95E38E"
                },
                "DestinationCidrBlock": "0.0.0.0/0",
                "GatewayId": {
                    "Ref": "VpcIGWD7BA715C"
                }
            },
            "DependsOn": [
                "VpcVPCGWBF912B6E"
            ]
        },
        "VpcPublicSubnet1EIPD7E02669": {
            "Type": "AWS::EC2::EIP",
            "Properties": {
                "Domain": "vpc",
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "no-arguments/Vpc/PublicSubnet1"
                    }
                ]
            }
        },
        "VpcPublicSubnet1NATGateway4D7517AA": {
            "Type": "AWS::EC2::NatGateway",
            "Properties": {
                "SubnetId": {
                    "Ref": "VpcPublicSubnet1Subnet5C2D37C4"
                },
                "AllocationId": {
                    "Fn::GetAtt": [
                        "VpcPublicSubnet1EIPD7E02669",
                        "AllocationId"
                    ]
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "no-arguments/Vpc/PublicSubnet1"
                    }
                ]
            }
        },
        "VpcPublicSubnet2Subnet691E08A3": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": {
                    "Ref": "Vpc8378EB38"
                },
                "AvailabilityZone": "test-region-1b",
                "CidrBlock": "172.168.32.0/19",
                "MapPublicIpOnLaunch": true,
                "Tags": [
                    {
                        "Key": "aws-cdk:subnet-name",
                        "Value": "Public"
                    },
                    {
                        "Key": "aws-cdk:subnet-type",
                        "Value": "Public"
                    },
                    {
                        "Key": "Name",
                        "Value": "no-arguments/Vpc/PublicSubnet2"
                    }
                ]
            },
            "Metadata": {
                "cfn_nag": {
                    "rules_to_suppress": [
                        {
                            "id": "W33",
                            "reason": "Allow Public Subnets to have MapPublicIpOnLaunch set to true"
                        }
                    ]
                }
            }
        },
        "VpcPublicSubnet2RouteTable94F7E489": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": {
                    "Ref": "Vpc8378EB38"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "no-arguments/Vpc/PublicSubnet2"
                    }
                ]
            }
        },
        "VpcPublicSubnet3RouteTable93458DBB": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": {
                    "Ref": "Vpc8378EB38"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "no-arguments/Vpc/PublicSubnet3"
                    }
                ]
            }
        },
        "VpcPublicSubnet2RouteTableAssociationDD5762D8": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "RouteTableId": {
                    "Ref": "VpcPublicSubnet2RouteTable94F7E489"
                },
                "SubnetId": {
                    "Ref": "VpcPublicSubnet2Subnet691E08A3"
                }
            }
        },
        "VpcPublicSubnet3RouteTableAssociation1F1EDF02": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "RouteTableId": {
                    "Ref": "VpcPublicSubnet3RouteTable93458DBB"
                },
                "SubnetId": {
                    "Ref": "VpcPublicSubnet3SubnetBE12F0B6"
                }
            }
        },
        "VpcPublicSubnet2DefaultRoute97F91067": {
            "Type": "AWS::EC2::Route",
            "Properties": {
                "RouteTableId": {
                    "Ref": "VpcPublicSubnet2RouteTable94F7E489"
                },
                "DestinationCidrBlock": "0.0.0.0/0",
                "GatewayId": {
                    "Ref": "VpcIGWD7BA715C"
                }
            },
            "DependsOn": [
                "VpcVPCGWBF912B6E"
            ]
        },
        "VpcPublicSubnet3DefaultRoute4697774F": {
            "Type": "AWS::EC2::Route",
            "Properties": {
                "RouteTableId": {
                    "Ref": "VpcPublicSubnet3RouteTable93458DBB"
                },
                "DestinationCidrBlock": "0.0.0.0/0",
                "GatewayId": {
                    "Ref": "VpcIGWD7BA715C"
                }
            },
            "DependsOn": [
                "VpcVPCGWBF912B6E"
            ]
        },
        "VpcPublicSubnet2EIP3C605A87": {
            "Type": "AWS::EC2::EIP",
            "Properties": {
                "Domain": "vpc",
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "no-arguments/Vpc/PublicSubnet2"
                    }
                ]
            }
        },
        "VpcPublicSubnet3EIP3A666A23": {
            "Type": "AWS::EC2::EIP",
            "Properties": {
                "Domain": "vpc",
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "no-arguments/Vpc/PublicSubnet3"
                    }
                ]
            }
        },
        "VpcPublicSubnet2NATGateway9182C01D": {
            "Type": "AWS::EC2::NatGateway",
            "Properties": {
                "SubnetId": {
                    "Ref": "VpcPublicSubnet2Subnet691E08A3"
                },
                "AllocationId": {
                    "Fn::GetAtt": [
                        "VpcPublicSubnet2EIP3C605A87",
                        "AllocationId"
                    ]
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "no-arguments/Vpc/PublicSubnet2"
                    }
                ]
            }
        },
        "VpcPublicSubnet3NATGateway7640CD1D": {
            "Type": "AWS::EC2::NatGateway",
            "Properties": {
                "SubnetId": {
                    "Ref": "VpcPublicSubnet3SubnetBE12F0B6"
                },
                "AllocationId": {
                    "Fn::GetAtt": [
                        "VpcPublicSubnet3EIP3A666A23",
                        "AllocationId"
                    ]
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "no-arguments/Vpc/PublicSubnet3"
                    }
                ]
            }
        },
        "VpcPrivateSubnet1Subnet536B997A": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": {
                    "Ref": "Vpc8378EB38"
                },
                "AvailabilityZone": "test-region-1a",
                "CidrBlock": "172.168.96.0/19",
                "MapPublicIpOnLaunch": false,
                "Tags": [
                    {
                        "Key": "aws-cdk:subnet-name",
                        "Value": "Private"
                    },
                    {
                        "Key": "aws-cdk:subnet-type",
                        "Value": "Private"
                    },
                    {
                        "Key": "Name",
                        "Value": "no-arguments/Vpc/PrivateSubnet1"
                    }
                ]
            }
        },
        "VpcPrivateSubnet1RouteTableB2C5B500": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": {
                    "Ref": "Vpc8378EB38"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "no-arguments/Vpc/PrivateSubnet1"
                    }
                ]
            }
        },
        "VpcPrivateSubnet1RouteTableAssociation70C59FA6": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "RouteTableId": {
                    "Ref": "VpcPrivateSubnet1RouteTableB2C5B500"
                },
                "SubnetId": {
                    "Ref": "VpcPrivateSubnet1Subnet536B997A"
                }
            }
        },
        "VpcPrivateSubnet1DefaultRouteBE02A9ED": {
            "Type": "AWS::EC2::Route",
            "Properties": {
                "RouteTableId": {
                    "Ref": "VpcPrivateSubnet1RouteTableB2C5B500"
                },
                "DestinationCidrBlock": "0.0.0.0/0",
                "NatGatewayId": {
                    "Ref": "VpcPublicSubnet1NATGateway4D7517AA"
                }
            }
        },
        "VpcPrivateSubnet2Subnet3788AAA1": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": {
                    "Ref": "Vpc8378EB38"
                },
                "AvailabilityZone": "test-region-1b",
                "CidrBlock": "172.168.128.0/19",
                "MapPublicIpOnLaunch": false,
                "Tags": [
                    {
                        "Key": "aws-cdk:subnet-name",
                        "Value": "Private"
                    },
                    {
                        "Key": "aws-cdk:subnet-type",
                        "Value": "Private"
                    },
                    {
                        "Key": "Name",
                        "Value": "no-arguments/Vpc/PrivateSubnet2"
                    }
                ]
            }
        },
        "VpcPrivateSubnet3SubnetF258B56E": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": {
                    "Ref": "Vpc8378EB38"
                },
                "AvailabilityZone": "test-region-1c",
                "CidrBlock": "172.168.160.0/19",
                "MapPublicIpOnLaunch": false,
                "Tags": [
                    {
                        "Key": "aws-cdk:subnet-name",
                        "Value": "Private"
                    },
                    {
                        "Key": "aws-cdk:subnet-type",
                        "Value": "Private"
                    },
                    {
                        "Key": "Name",
                        "Value": "no-arguments/Vpc/PrivateSubnet3"
                    }
                ]
            }
        },
        "VpcPrivateSubnet2RouteTableA678073B": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": {
                    "Ref": "Vpc8378EB38"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "no-arguments/Vpc/PrivateSubnet2"
                    }
                ]
            }
        },
        "VpcPrivateSubnet3RouteTableD98824C7": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": {
                    "Ref": "Vpc8378EB38"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "no-arguments/Vpc/PrivateSubnet3"
                    }
                ]
            }
        },
        "VpcPrivateSubnet2RouteTableAssociationA89CAD56": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "RouteTableId": {
                    "Ref": "VpcPrivateSubnet2RouteTableA678073B"
                },
                "SubnetId": {
                    "Ref": "VpcPrivateSubnet2Subnet3788AAA1"
                }
            }
        },
        "VpcPrivateSubnet3RouteTableAssociation16BDDC43": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "RouteTableId": {
                    "Ref": "VpcPrivateSubnet3RouteTableD98824C7"
                },
                "SubnetId": {
                    "Ref": "VpcPrivateSubnet3SubnetF258B56E"
                }
            }
        },
        "VpcPrivateSubnet2DefaultRoute060D2087": {
            "Type": "AWS::EC2::Route",
            "Properties": {
                "RouteTableId": {
                    "Ref": "VpcPrivateSubnet2RouteTableA678073B"
                },
                "DestinationCidrBlock": "0.0.0.0/0",
                "NatGatewayId": {
                    "Ref": "VpcPublicSubnet2NATGateway9182C01D"
                }
            }
        },
        "VpcPrivateSubnet3DefaultRoute94B74F0D": {
            "Type": "AWS::EC2::Route",
            "Properties": {
                "RouteTableId": {
                    "Ref": "VpcPrivateSubnet3RouteTableD98824C7"
                },
                "DestinationCidrBlock": "0.0.0.0/0",
                "NatGatewayId": {
                    "Ref": "VpcPublicSubnet3NATGateway7640CD1D"
                }
            }
        },
        "VpcIGWD7BA715C": {
            "Type": "AWS::EC2::InternetGateway",
            "Properties": {
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "no-arguments/Vpc"
                    }
                ]
            }
        },
        "VpcVPCGWBF912B6E": {
            "Type": "AWS::EC2::VPCGatewayAttachment",
            "Properties": {
                "VpcId": {
                    "Ref": "Vpc8378EB38"
                },
                "InternetGatewayId": {
                    "Ref": "VpcIGWD7BA715C"
                }
            }
        },
        "VpcFlowLogIAMRole6A475D41": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Action": "sts:AssumeRole",
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "vpc-flow-logs.amazonaws.com"
                            }
                        }
                    ],
                    "Version": "2012-10-17"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "no-arguments/Vpc"
                    }
                ]
            }
        },
        "VpcFlowLogIAMRoleDefaultPolicy406FB995": {
            "Type": "AWS::IAM::Policy",
            "Properties": {
                "PolicyDocument": {
                    "Statement": [
                        {
                            "Action": [
                                "logs:CreateLogStream",
                                "logs:PutLogEvents",
                                "logs:DescribeLogStreams"
                            ],
                            "Effect": "Allow",
                            "Resource": {
                                "Fn::GetAtt": [
                                    "VpcFlowLogLogGroup7B5C56B9",
                                    "Arn"
                                ]
                            }
                        },
                        {
                            "Action": "iam:PassRole",
                            "Effect": "Allow",
                            "Resource": {
                                "Fn::GetAtt": [
                                    "VpcFlowLogIAMRole6A475D41",
                                    "Arn"
                                ]
                            }
                        }
                    ],
                    "Version": "2012-10-17"
                },
                "PolicyName": "VpcFlowLogIAMRoleDefaultPolicy406FB995",
                "Roles": [
                    {
                        "Ref": "VpcFlowLogIAMRole6A475D41"
                    }
                ]
            }
        },
        "VpcFlowLogLogGroup7B5C56B9": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
                "RetentionInDays": 731,
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "no-arguments/Vpc"
                    }
                ]
            },
            "UpdateReplacePolicy": "Retain",
            "DeletionPolicy": "Retain",
            "Metadata": {
                "cfn_nag": {
                    "rules_to_suppress": [
                        {
                            "id": "W84",
                            "reason": "By default CloudWatchLogs LogGroups data is encrypted using the CloudWatch server-side encryption keys (AWS Managed Keys)"
                        }
                    ]
                }
            }
        },
        "VpcFlowLog8FF33A73": {
            "Type": "AWS::EC2::FlowLog",
            "Properties": {
                "ResourceId": {
                    "Ref": "Vpc8378EB38"
                },
                "ResourceType": "VPC",
                "TrafficType": "ALL",
                "DeliverLogsPermissionArn": {
                    "Fn::GetAtt": [
                        "VpcFlowLogIAMRole6A475D41",
                        "Arn"
                    ]
                },
                "LogDestinationType": "cloud-watch-logs",
                "LogGroupName": {
                    "Ref": "VpcFlowLogLogGroup7B5C56B9"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "no-arguments/Vpc"
                    }
                ]
            }
        },
        "testmkslambdaLambdaFunctionServiceRole1EEB9473": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Action": "sts:AssumeRole",
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "lambda.amazonaws.com"
                            }
                        }
                    ],
                    "Version": "2012-10-17"
                },
                "ManagedPolicyArns": [
                    {
                        "Fn::Join": [
                            "",
                            [
                                "arn:",
                                {
                                    "Ref": "AWS::Partition"
                                },
                                ":iam::aws:policy/service-role/AWSLambdaMSKExecutionRole"
                            ]
                        ]
                    }
                ],
                "Policies": [
                    {
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Action": [
                                        "logs:CreateLogGroup",
                                        "logs:CreateLogStream",
                                        "logs:PutLogEvents"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": {
                                        "Fn::Join": [
                                            "",
                                            [
                                                "arn:",
                                                {
                                                    "Ref": "AWS::Partition"
                                                },
                                                ":logs:",
                                                {
                                                    "Ref": "AWS::Region"
                                                },
                                                ":",
                                                {
                                                    "Ref": "AWS::AccountId"
                                                },
                                                ":log-group:/aws/lambda/*"
                                            ]
                                        ]
                                    }
                                }
                            ],
                            "Version": "2012-10-17"
                        },
                        "PolicyName": "LambdaFunctionServiceRolePolicy"
                    }
                ]
            }
        },
        "testmkslambdaLambdaFunctionServiceRoleDefaultPolicy6CCC2F88": {
            "Type": "AWS::IAM::Policy",
            "Properties": {
                "PolicyDocument": {
                    "Statement": [
                        {
                            "Action": [
                                "xray:PutTraceSegments",
                                "xray:PutTelemetryRecords"
                            ],
                            "Effect": "Allow",
                            "Resource": "*"
                        },
                        {
                            "Action": [
                                "sqs:SendMessage",
                                "sqs:GetQueueAttributes",
                                "sqs:GetQueueUrl"
                            ],
                            "Effect": "Allow",
                            "Resource": {
                                "Fn::GetAtt": [
                                    "testmkslambdaSqsDlqQueue31416155",
                                    "Arn"
                                ]
                            }
                        },
                        {
                            "Action": [
                                "kafka:DescribeCluster",
                                "kafka:GetBootstrapBrokers",
                                "kafka:ListScramSecrets"
                            ],
                            "Effect": "Allow",
                            "Resource": {
                                "Ref": "testmkslambdaMskCluster1BAB3398"
                            }
                        }
                    ],
                    "Version": "2012-10-17"
                },
                "PolicyName": "testmkslambdaLambdaFunctionServiceRoleDefaultPolicy6CCC2F88",
                "Roles": [
                    {
                        "Ref": "testmkslambdaLambdaFunctionServiceRole1EEB9473"
                    }
                ]
            },
            "Metadata": {
                "cfn_nag": {
                    "rules_to_suppress": [
                        {
                            "id": "W12",
                            "reason": "Lambda needs the following minimum required permissions to send trace data to X-Ray and access ENIs in a VPC."
                        }
                    ]
                }
            }
        },
        "testmkslambdaLambdaFunctionC23B66E2": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
                    "S3Bucket": {
                        "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-us-east-1"
                    },
                    "S3Key": "7149f2cec46fb6f61600ff1c28ef0e37f7da5f14fbada1147b268ef1bd5a400c.zip"
                },
                "Role": {
                    "Fn::GetAtt": [
                        "testmkslambdaLambdaFunctionServiceRole1EEB9473",
                        "Arn"
                    ]
                },
                "Environment": {
                    "Variables": {
                        "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1"
                    }
                },
                "Handler": "index.handler",
                "Runtime": "nodejs14.x",
                "TracingConfig": {
                    "Mode": "Active"
                }
            },
            "DependsOn": [
                "testmkslambdaLambdaFunctionServiceRoleDefaultPolicy6CCC2F88",
                "testmkslambdaLambdaFunctionServiceRole1EEB9473"
            ],
            "Metadata": {
                "cfn_nag": {
                    "rules_to_suppress": [
                        {
                            "id": "W58",
                            "reason": "Lambda functions has the required permission to write CloudWatch Logs. It uses custom policy instead of arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole with tighter permissions."
                        },
                        {
                            "id": "W89",
                            "reason": "This is not a rule for the general case, just for specific use cases/industries"
                        },
                        {
                            "id": "W92",
                            "reason": "Impossible for us to define the correct concurrency for clients"
                        }
                    ]
                }
            }
        },
        "testmkslambdaLambdaFunctionKafkaEventSourcenoargumentstestmkslambdaLambdaFunction8BF222A1testtopic91E7BA7C": {
            "Type": "AWS::Lambda::EventSourceMapping",
            "Properties": {
                "FunctionName": {
                    "Ref": "testmkslambdaLambdaFunctionC23B66E2"
                },
                "BatchSize": 100,
                "DestinationConfig": {
                    "OnFailure": {
                        "Destination": {
                            "Fn::GetAtt": [
                                "testmkslambdaSqsDlqQueue31416155",
                                "Arn"
                            ]
                        }
                    }
                },
                "EventSourceArn": {
                    "Ref": "testmkslambdaMskCluster1BAB3398"
                },
                "StartingPosition": "TRIM_HORIZON",
                "Topics": [
                    "test-topic"
                ]
            }
        },
        "testmkslambdaMskClusterSecurityGroupB4802FE6": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "MSK security group",
                "SecurityGroupEgress": [
                    {
                        "CidrIp": "0.0.0.0/0",
                        "Description": "Allow all outbound traffic by default",
                        "IpProtocol": "-1"
                    }
                ],
                "VpcId": {
                    "Ref": "Vpc8378EB38"
                }
            }
        },
        "testmkslambdaMskCluster1BAB3398": {
            "Type": "AWS::MSK::Cluster",
            "Properties": {
                "BrokerNodeGroupInfo": {
                    "ClientSubnets": [
                        {
                            "Ref": "VpcPrivateSubnet1Subnet536B997A"
                        },
                        {
                            "Ref": "VpcPrivateSubnet2Subnet3788AAA1"
                        },
                        {
                            "Ref": "VpcPrivateSubnet3SubnetF258B56E"
                        }
                    ],
                    "InstanceType": "kafka.m5.large",
                    "SecurityGroups": [
                        {
                            "Fn::GetAtt": [
                                "testmkslambdaMskClusterSecurityGroupB4802FE6",
                                "GroupId"
                            ]
                        }
                    ],
                    "StorageInfo": {
                        "EBSStorageInfo": {
                            "VolumeSize": 1000
                        }
                    }
                },
                "ClusterName": "test-cluster",
                "KafkaVersion": "2.8.1",
                "NumberOfBrokerNodes": 3,
                "EncryptionInfo": {
                    "EncryptionInTransit": {
                        "ClientBroker": "TLS",
                        "InCluster": true
                    }
                },
                "LoggingInfo": {
                    "BrokerLogs": {
                        "CloudWatchLogs": {
                            "Enabled": false
                        },
                        "Firehose": {
                            "Enabled": false
                        },
                        "S3": {
                            "Enabled": false
                        }
                    }
                }
            },
            "UpdateReplacePolicy": "Retain",
            "DeletionPolicy": "Retain"
        },
        "testmkslambdaSqsDlqQueue31416155": {
            "Type": "AWS::SQS::Queue",
            "Properties": {
                "KmsMasterKeyId": "alias/aws/sqs"
            },
            "UpdateReplacePolicy": "Delete",
            "DeletionPolicy": "Delete"
        },
        "testmkslambdaSqsDlqQueuePolicy068531BF": {
            "Type": "AWS::SQS::QueuePolicy",
            "Properties": {
                "PolicyDocument": {
                    "Statement": [
                        {
                            "Action": [
                                "sqs:DeleteMessage",
                                "sqs:ReceiveMessage",
                                "sqs:SendMessage",
                                "sqs:GetQueueAttributes",
                                "sqs:RemovePermission",
                                "sqs:AddPermission",
                                "sqs:SetQueueAttributes"
                            ],
                            "Effect": "Allow",
                            "Principal": {
                                "AWS": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "arn:",
                                            {
                                                "Ref": "AWS::Partition"
                                            },
                                            ":iam::",
                                            {
                                                "Ref": "AWS::AccountId"
                                            },
                                            ":root"
                                        ]
                                    ]
                                }
                            },
                            "Resource": {
                                "Fn::GetAtt": [
                                    "testmkslambdaSqsDlqQueue31416155",
                                    "Arn"
                                ]
                            },
                            "Sid": "QueueOwnerOnlyAccess"
                        },
                        {
                            "Action": "SQS:*",
                            "Condition": {
                                "Bool": {
                                    "aws:SecureTransport": "false"
                                }
                            },
                            "Effect": "Deny",
                            "Principal": {
                                "AWS": "*"
                            },
                            "Resource": {
                                "Fn::GetAtt": [
                                    "testmkslambdaSqsDlqQueue31416155",
                                    "Arn"
                                ]
                            },
                            "Sid": "HttpsOnly"
                        }
                    ],
                    "Version": "2012-10-17"
                },
                "Queues": [
                    {
                        "Ref": "testmkslambdaSqsDlqQueue31416155"
                    }
                ]
            }
        }
    },
    "Parameters": {
        "BootstrapVersion": {
            "Type": "AWS::SSM::Parameter::Value<String>",
            "Default": "/cdk-bootstrap/hnb659fds/version",
            "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]"
        }
    },
    "Rules": {
        "CheckBootstrapVersion": {
            "Assertions": [
                {
                    "Assert": {
                        "Fn::Not": [
                            {
                                "Fn::Contains": [
                                    [
                                        "1",
                                        "2",
                                        "3",
                                        "4",
                                        "5"
                                    ],
                                    {
                                        "Ref": "BootstrapVersion"
                                    }
                                ]
                            }
                        ]
                    },
                    "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI."
                }
            ]
        }
    }
}